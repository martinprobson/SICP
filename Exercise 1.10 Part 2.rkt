#lang racket
; vim:ts=4:sw=4:sts=4:et:syntax=scheme
;
; SICP - Exercise 1.10 - The procedure below computes a mathematical function called Ackermann's function.
;
; Note: Actually, this function is slightly different to Ackermann's 
; (see http://mathworld.wolfram.com/AckermannFunction.html )
;
;   Part A

	
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

;
; What are the values of the following expressions?
;       (A 1 10)
;       (A 2 4)
;       (A 3 3)

;___________________________________________________________________________________________________________
(A 1 4)
    (A 0 (A 1 3))
        (A 0 (A 0 (A 1 2)))
            (A 0 (A 0 (A 0 (A 1 1))))
        (A 0 (A 0 (A 0 2)))
    (A 0 (A 0 4))
(A 0 8)
;16              == 2^4
;___________________________________________________________________________________________________________
(A 1 10)
    (A 0 (A 1 9))
        (A 0 (A 0 (A 1 8)))
            (A 0 (A 0 (A 0 (A 1 7))))
                (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
                    (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
                        (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
                            (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
                                (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
                                    (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
                                (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
                            (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
                        (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
                    (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
                (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
            (A 0 (A 0 (A 0 (A 0 64))))
        (A 0 (A 0 (A 0 128)))
    (A 0 (A 0 256))
(A 0 512)
;1024            == 2^10
;___________________________________________________________________________________________________________
(A 2 2)
    (A 1 (A 2 1))
    (A 1 2)                 ; <---------
        (A 0 (A 1 1))
        (A 0 2)
4
;___________________________________________________________________________________________________________
(A 2 3)
    (A 1 (A 2 2))
        (A 1 (A 1 (A 2 1)))
        (A 1 (A 1 2))               ; <------------
            (A 1 (A 0 (A 1 1)))
            (A 1 (A 0 2))
            (A 1 4)
16
;___________________________________________________________________________________________________________
(A 2 4)
    (A 1 (A 2 3))
        (A 1 (A 1 (A 2 2)))
            (A 1 (A 1 (A 1 (A 2 1))))
            (A 1 (A 1 (A 1 2)))             ;<------------
                (A 1 (A 1 (A 0 (A 1 1))))
            (A 1 (A 1 (A 0 2)))
        (A 1 (A 1 4))
            (A 1 (A 0 (A 1 3)))
                (A 1 (A 0 (A 0 (A 1 2))))
                    (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
                (A 1 (A 0 (A 0 (A 0 2))))
            (A 1 (A 0 (A 0 4)))
        (A 1 (A 0 8))
    (A 1 16)
        (A 0 (A 1 15))     ; - Shortcut based on (A 1 10) == 1024 therefore (A 1 15) == 2^15 == 32768 
    (A 0 32768)
65536   
	
;___________________________________________________________________________________________________________
(A 3 3)     
    (A 2 (A 3 2))
        (A 2 (A 2 (A 3 1)))
    (A 2 (A 2 2))
        (A 2 (A 1 (A 2 1)))
    (A 2 (A 1 2))
        (A 2 (A 0 (A 1 1)))
    (A 2 (A 0 2))
    (A 2 4)                 ; Shortcut based on above, therefore returns 65536

	
;___________________________________________________________________________________________________________
; Part B
;
;   Consider the following procedures, where A is the procedure defined above:-

          (define (f n) (A 0 n))
          (define (g n) (A 1 n))
          (define (h n) (A 2 n))
          (define (k n) (* 5 n n))

;           (f n)   computes 2n 
;           (g n)   computes 2^n
;           

            





